常用命令：
1. 初始化本地库命令： git init
2. 查看隐藏文件（夹）：ll -a
3. 查看本地库状态： git status
4. 将文件添加到暂存区：git add 文件名.txt 或者 git add .
5. 将文件从暂存区中删除：git rm --cached 文件名.txt
6. 提交本地库：git commit -m "日志信息" 文件名.txt
7. 查看版本引用日志信息：git reflog
8. 查看版本详细日志信息：git log
9. 版本穿梭：git reset --hard 版本号	[版本号可通过git reflog得到；]
[可在.git/HEAD文件中查看当前指针位置；可在.git/ref/master文件中查看当前版本号；]

分支操作：
1. 创建分支：git branch 分支名
2. 查看分支：git branch -v
3. 切换分支：git checkout 分支名
4. 回到当前分支，把指定的分支合并到当前分支上：git merge 分支名(指定的分支名；被合并的分支名)
5. 如果2个分支，各自修改并各自提交到本地库后，当修改的是同一文件同一处时，会出现合并冲突[此时出现（当前分支名|MERGING）]。
此时打开出现冲突的文件，手动消除冲突。
然后git add 文件名，
但是之后commit的时候不要带文件名：git commit -m "merge commit"。


远程库操作：
1. sign in https://github.com
2. create repository: https://github.com/zhw-git-hub/git-demo.git
3. 查看当前所有远程地址别名：git remote -v
4. 起别名：git remote add 别名 远程地址
5. 推送本地分支上的内容到远程仓库：git push 别名 分支
6. 将远程仓库的内容克隆到本地：git clone 远程地址
[在本地创建另外一个文件夹git-clone，从远程仓库git-demo拉取代码到本地新文件夹git-clone。此时应注意：由于git-demo和git-clone两个文件夹都在本地同一台电脑上，需要先进入Window“凭据管理器”将git-demo的“凭据”删除。因为一台电脑只能保存一个github的凭据。]
[如果远程仓库是public，clone时不需要输入密码。]
[克隆代码不需要登录账号。]
[公共库的读权限是没有限制的，任何人都可以查看/克隆该库代码。]
[clone会做如下操作：1. 拉取代码；2.初始化本地库；3.创建别名(original)。]
7. 将远程仓库对于分支最新内容拉下来后，与当前本地分支直接合并：git pull 远程库地址别名 远程分支名
[在做任何代码修改前，需执行此操作以保证本地代码与远程代码保持一致]
8. 团队内协作：
团队内其他成员修改了代码后，需添加(add)到暂存区，提交(commit)到本地库，推送(push)到远程库。
此时，首先需要repo owner将该成员加到团队内，之后向该成员发送邀请链接，团队内成员接受邀请；则团队内成员可看到及有权限修改owner repo中的代码，git push 到owner repo(远程)，才能成功。
9. 跨团队协作：首先owner的repo应设置为public,只有这样，团队外成员才能搜索到或通过git URL访问到owner repo;然后使用fork将owner repo导入团队外成员的本地库中，以便于团队外成员帮忙修改代码；在代码修改好后，团队外成员需向repo的owner发送pull request, owner审核后，认为没问题，则可接受修改，将代码合并到自己的repo中；



















































